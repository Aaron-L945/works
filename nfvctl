#!/usr/bin/env python
# encoding: utf-8

import ConfigParser
import sys, os, copy, time, socket,struct, netaddr,uuid, tempfile, json, pdb, random
from optparse import OptionParser
import paramiko
from collections import OrderedDict
uuid_list_all = [
    '17a13c61-fb6b-11e8-bdfd-f079601e4632',
    '47a14157-fb6b-11e8-8e51-f079601e4632',
    '87a1496e-fb6b-11e8-b450-f079601e4632',
    '57a14c51-fb6b-11e8-b3e3-f079601e4632',
    '37a14f05-fb6b-11e8-b97d-f079601e4632',
    '67a1518f-fb6b-11e8-b66c-f079601e4632',
    'f7a15417-fb6b-11e8-a1f6-f079601e4632',
    '77a156a1-fb6b-11e8-b67a-f079601e4632',
    '97a1592e-fb6b-11e8-94d3-f079601e4632',
    'e7a15b99-fb6b-11e8-b6e6-f079601e4632',
    '67a15de6-cb6b-11e8-b49b-f079601e4632',
    '37a16063-f26b-11e8-a9db-f079601e4632',
    '37a162c7-fb6b-11e8-8c35-f079601e4632',
    'a7a16551-fb6b-11e8-8f5b-f079601e4632',
    'c7a167bd-fb6b-11e8-837f-f079601e4632',
    'b7a16a02-fb6b-11e8-81b6-f079601e4632',
    'd7a16c59-fb6b-11e8-8a92-f079601e4632',
    '27a16ec5-2b6b-11e8-a07e-f079601e4632',
    '37a17128-3b6b-11e8-b50d-f079601e4632',
    '37a17375-db6b-11e8-9274-f079601e4632',
    '37a17614-8b6b-11e8-b4f2-f079601e4632',
    '37a17bdc-7b6b-11e8-857d-f079601e4632'
]



def _put(sftp_cls, src, dst):
    try:
        getattr(sftp_cls, 'rename')(dst, dst+'.'+time.asctime().replace(' ', '-'))
    except Exception as e:
        pass
    try:
        getattr(sftp_cls,'mkdir')(os.path.dirname(dst))
    except Exception as e:
        pass
    return getattr(sftp_cls, 'put')(src, dst)
        
def _write(sftp_cls, src, dst):
    try:
        getattr(sftp_cls,'mkdir')(os.path.dirname(dst))
    except Exception as e:
        pass
    fd = getattr(sftp_cls, 'file')(dst, 'w')
    fd.write(src)
    fd.close()
    
def _exec(ssh_cls, cmd):
    return getattr(ssh_cls, 'exec_command')(cmd,get_pty=True)
    


def ipstr_to_iplist(ipstr=''):
    ips=[]
    for _ipstr in ipstr.split(','):
        _ip_range = _ipstr.split('-')
        if len(_ip_range) == 2:
            ip_range=netaddr.IPRange(_ip_range[0],_ip_range[1])
        elif len(_ip_range) == 1:
            ip_range=netaddr.IPRange(_ip_range[0],_ip_range[0])
        else:
            print "xxxx IP address range error"
            sys.exit(2)
        for ip in range(ip_range.first, ip_range.last+1):
            ips.append(socket.inet_ntoa(struct.pack('I',socket.htonl(ip))))
    return ips

def vlanstr_to_vlanlist(vlanstr=''):
    vlans=[]
    for _vlanstr in vlanstr.split(','):
        _vlan_range = _vlanstr.split('-')
        if len(_vlan_range) == 2:
            vlan_start=int(_vlan_range[0])
            vlan_end=int(_vlan_range[1])
        elif len(_ip_range) == 1:
            vlan_start=int(_vlan_range[0])
            vlan_end=int(_vlan_range[0])
        else:
            print "xxxx VLAN address range error"
            sys.exit(2)
        for vlan in range(vlan_start, vlan_end+1):
            vlans.append(vlan)
    return vlans

class SshClient(object):
    def __init__(self, server, port, user, passwd):
        self.server = server
        self.port = port
        self.user = user
        self.passwd = passwd
        self.ssh = paramiko.SSHClient()
        self.ssh.load_system_host_keys()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    #sftp_cbs=[[func,param1,param2],...], func must be in _put and _write
    #ssh_cbs=[[func, command],...], func must be in _exec
    def execute(self, sftp_cbs=[], ssh_cbs=[], ret=False):    
        try:
            self.ssh.connect(self.server, self.port, self.user, self.passwd, 
                             timeout=600) 
            sftp = paramiko.SFTPClient.from_transport(self.ssh.get_transport())
            
            for sftp_cb in sftp_cbs:
                try:
                    result=sftp_cb[0](sftp, sftp_cb[1],sftp_cb[2])
                    if ret:
                        print result
                except Exception as e:
                    print sftp_cb
            for ssh_cb in ssh_cbs:
                try:
                    stdin,stdout,stder=ssh_cb[0](self.ssh, ssh_cb[1])
                    #if ret:
                    print stdout.read()
                    #print stder.read()

                except Exception as e:
                    print ssh_cb
        except Exception as e:
            print 'Connect %s failed: %s'%(self.server, e)
        finally:
            self.ssh.close()
        return
    def execute_result(self, ssh_cbs=[], ret=False):
        result = ''
        try:
            self.ssh.connect(self.server, self.port, self.user, self.passwd,
                             timeout=1200)
            for ssh_cb in ssh_cbs:
                try:
                    stdin,stdout,stder=ssh_cb[0](self.ssh, ssh_cb[1])
                    result = stdout.read()
                    #if ret:
                        #print r_gen_vsr_topo_from_confesult
                        #print stder.read()


                except Exception as e:
                    print ssh_cb
        except Exception as e:
            print 'Connect %s failed: %s'%(self.server, e)
        finally:
            self.ssh.close()
        return result
    
class TopoUtil(object):        
    def _gen_topo_from_conf(self, hosts='', nfvs='', vlans='', per_host=10):
        topo=[]
        hosts = ipstr_to_iplist(hosts)
        nfvs  = ipstr_to_iplist(nfvs) 
        vlans = vlanstr_to_vlanlist(vlans)
        while True:
            if not hosts:
                break
            host1={"host":hosts.pop(), "nfvs":[]}
            host2={"host":hosts.pop(), "nfvs":[]}
            for i in range(0, per_host):
                if len(nfvs) < 3 or len(vlans) < 1:
                    break
                vip = nfvs.pop()
                vlan=vlans.pop()
                host1["nfvs"].append({"nfv_ip":nfvs.pop(), "nfv_vip":vip, 
                                      "vlan":vlan, "vrrp_group":int(vip.split('.')[3])})
                host2["nfvs"].append({"nfv_ip":nfvs.pop(), "nfv_vip":vip, 
                                      "vlan":vlan, "vrrp_group":int(vip.split('.')[3])})
            topo.append(host1)
            topo.append(host2)
        return topo
    
    def gen_topo_from_conf(self, config):
        return self._gen_topo_from_conf(hosts=config.get('host', 'ip_range'),
                    nfvs=config.get('nfv', 'ip_range'), 
                    vlans=config.get('nfv', 'vlan_range'), 
                    per_host=config.getint('host','per_host'))
            
    def topo_show(self, topo):
        for v in topo:
            for nfv in v['nfvs']:
                print '| host %16s| nfv_ip %16s| nfv_vip %16s| vlan %4s| vrrp_group %4s|'\
                        %(v['host'],nfv["nfv_ip"], nfv["nfv_vip"],nfv["vlan"], nfv['vrrp_group'])

    def topo_vsr_show(self,topo,config):
        for v in topo:

            for nfv in v['nfvs']:
                #print '%s\n' % nfv.get('uuid')
                #if  nfv == first_nfv or nfv == second_nfv:
                if  nfv.get('rr') is not None:
                    if config.get('vsr_rr','nic_type') == 'sriov' and config.getboolean('vsr_rr','vcpu_pin') == False:
                        print '| host %16s| nfv_ip RR%14s| nfv_dp %16s| sys_ip %16s|vfs1 %16s| vfs2 %16s|' \
                              % (v['host'], nfv["nfv_ip"], nfv["dp_ip"], nfv["sys_ip"],nfv.get("vfs1"),nfv.get("vfs2"))
                    elif config.get('vsr_rr','nic_type') == 'sriov' and config.getboolean('vsr_rr','vcpu_pin') == True:
                        print '| host %16s| nfv_ip RR%14s| nfv_dp %16s| sys_ip %16s|vfs1 %16s|vfs2 %16s|phy_cpu %4s|' \
                              % (v['host'], nfv["nfv_ip"], nfv["dp_ip"], nfv["sys_ip"],nfv.get('vfs1'),nfv.get('vfs2'),nfv["phy_cpu"])
                    elif config.get('vsr_rr','nic_type') == 'virtio' and config.getboolean('vsr_rr','vcpu_pin') == True:
                        print '| host %16s| nfv_ip RR%14s| nfv_dp %16s| sys_ip %16s|virtio %16s|phy_cpu %4s|' \
                              % (v['host'], nfv["nfv_ip"], nfv["dp_ip"], nfv["sys_ip"],nfv.get('br_dp'),nfv["phy_cpu"])
                                        
                    else:
                        print '| host %16s| nfv_ip RR%14s| nfv_dp %16s| sys_ip %16s|virtio %16s|'\
                                %(v['host'],nfv["nfv_ip"], nfv["dp_ip"],nfv["sys_ip"],nfv.get('br_dp'))
                else:
                    if config.get('nfv','nic_type') == 'sriov' and config.getboolean('nfv','vcpu_pin') == False:
                        print '| host %16s| nfv_ip %16s| nfv_dp %16s| sys_ip %16s|vfs1 %16s|vfs2 %16s|' \
                              % (v['host'], nfv["nfv_ip"], nfv["dp_ip"], nfv["sys_ip"],nfv.get('vfs1'),nfv.get('vfs2'))
                    elif config.get('nfv','nic_type') == 'sriov' and config.getboolean('nfv','vcpu_pin') == True:
                        print '| host %16s| nfv_ip %16s| nfv_dp %16s| sys_ip %16s|vfs1 %16s|vfs2 %16s|phy_cpu %4s|' \
                              % (v['host'], nfv["nfv_ip"], nfv["dp_ip"], nfv["sys_ip"],nfv.get('vfs1'),nfv.get('vfs2'),nfv["phy_cpu"])
                    elif config.get('nfv','nic_type') == 'virtio' and config.getboolean('nfv','vcpu_pin') == True:
                        print '| host %16s| nfv_ip %16s| nfv_dp %16s| sys_ip %16s|virtio %16s|phy_cpu %4s|' \
                              % (v['host'], nfv["nfv_ip"], nfv["dp_ip"], nfv["sys_ip"],nfv.get('br_dp'),nfv["phy_cpu"])
                    else:
                        print '| host %16s| nfv_ip %16s| nfv_dp %16s| sys_ip %16s|virtio %16s|'\
                                %(v['host'],nfv["nfv_ip"], nfv["dp_ip"],nfv["sys_ip"],nfv.get('br_dp'))
    def gen_vsr_topo_from_conf(self,config):
        topo = []
        topo = self._gen_rr_vsr_topo_from_conf(config,uuid_list=uuid_list_all)
        return topo + self._gen_vsr_topo_from_conf(config,hosts=config.get('host', 'ip_range'),
                    nfvs=config.get('nfv', 'ip_range'),
                    per_host=config.getint('host','per_host'),
                    uuid_list=uuid_list_all)

    def _gen_sriov_vfs_info(self,sriov_ethernets,per_ethernet,ssh_client,one_host = False):

        host_all_vfs = []
        count_per_ethernet = int(per_ethernet)
        if one_host is True:
            count_per_ethernet = count_per_ethernet * 2

        for sriov_ethernet in sriov_ethernets.split(','):
            cmd = "sudo readlink -f /sys/class/net/%s/device/virtfn* | awk -F/ '{print $6}'" % sriov_ethernet
            ssh_cbs = []
            ssh_cbs.append([_exec, cmd])
            host_virtfns = ssh_client.execute_result(ssh_cbs,ret=True)
            host_vfs = host_virtfns.split('\n')
            host_vfs.pop()

            if len(host_vfs) < count_per_ethernet:
                for host_vf in host_vfs:
                    host_all_vfs.append(host_vf)
            else:
                for i in range(0,count_per_ethernet):
                    host_all_vfs.append(host_vfs[i])
        return host_all_vfs
    def _gen_vcpu_info(self,cpu_ranges):
        cpu_list = []
        for cpu_range in cpu_ranges.split(','):
            cpu = cpu_range.split('-')
            if len(cpu)==2:
                for cpu_no  in range(int(cpu[0]),int(cpu[1]) + 1):
                    cpu_list.append(str(cpu_no))
            if len(cpu)==1:
                cpu_list.append(cpu[0])
        return cpu_list
    def _gen_rr_vsr_topo_from_conf(self,config,uuid_list=[]):
        topo=[]
        vcpu_num = config.getint('nfv', 'vcpu')
        host1_vfs = []
        host2_vfs = []
        host1_vfs2 = []
        host2_vfs2 = []
        cpu_list = []
        group_index = config.getint('nfv', 'vsr_group_start')

        config_rr = config.get('vsr_rr','host')
        if config_rr is not None and config_rr!='':
            rr_hosts = ipstr_to_iplist(config.get('vsr_rr','host'))
            rr_nics1 = config.get('vsr_rr','sriov_vnet1')
            rr_nics2 = config.get('vsr_rr','sriov_vnet2')
            rr_nic_type = config.get('vsr_rr','nic_type')
            rr_vcpu_pin_enable = config.getboolean('vsr_rr', 'vcpu_pin')
            rr_cpu_range = config.get('vsr_rr','cpu_range')
            nfvs  = ipstr_to_iplist(config.get('vsr_rr','rr_mgmt_ip'))
            dp_ip_list = ipstr_to_iplist(config.get('vsr_rr','rr_dp_ip'))
            sys_ip_list  = ipstr_to_iplist(config.get('vsr_rr','rr_system_ip'))

            while True:
                if len(rr_hosts)<2:
                    break
                host1={"host":rr_hosts.pop(), "nfvs":[]}
                host2={"host":rr_hosts.pop(), "nfvs":[]}
                if rr_nic_type == 'sriov':
                    ssh_client1 = SshClient(host1['host'], 22, config.get('host', 'user'),
                                        config.get('host', 'passwd'))
                    ssh_client2 = SshClient(host2['host'], 22, config.get('host', 'user'),
                                        config.get('host', 'passwd'))
                    if host1['host'] == host2['host']:
                        if rr_nics1 is not None and rr_nics1 != '':
                            host1_vfs = self._gen_sriov_vfs_info(rr_nics1,'1',ssh_client1,one_host=True)
                            host2_vfs = host1_vfs
                        if rr_nics2 is not None and rr_nics2 != '':
                            host1_vfs2 = self._gen_sriov_vfs_info(rr_nics2,'1',ssh_client1,one_host=True)
                            host2_vfs2 = host1_vfs2
                    else:
                        if rr_nics1 is not None and rr_nics1 != '':
                            host1_vfs = self._gen_sriov_vfs_info(rr_nics1, '1', ssh_client1)
                            host2_vfs = self._gen_sriov_vfs_info(rr_nics1, '1', ssh_client2)                           
                        if rr_nics2 is not None and rr_nics2 != '':
                            host1_vfs2 = self._gen_sriov_vfs_info(rr_nics2, '1', ssh_client1)
                            host2_vfs2 = self._gen_sriov_vfs_info(rr_nics2, '1', ssh_client2)
                if rr_vcpu_pin_enable == True:
                    cpu_list = self._gen_vcpu_info(rr_cpu_range)
                for i in range(0, 1):
                    if len(nfvs) < 2 or len(dp_ip_list) < 2 or len(sys_ip_list) < 2:
                        break
                    if rr_vcpu_pin_enable == True:

                        if host1['host'] == host2['host']:
                            if len(cpu_list) < vcpu_num*2:
                                break;
                        else:
                            if len(cpu_list) < vcpu_num:
                                break;
                    if  rr_nic_type == 'sriov' and (len(host1_vfs) < 1 or len(host2_vfs) < 1) and (len(host1_vfs2) < 1 or len(host2_vfs2) < 1):
                        break;

                    nfv1_info = {'nfv_ip':nfvs.pop(),'dp_ip':dp_ip_list.pop(),'sys_ip':sys_ip_list.pop()}
                    nfv2_info = {'nfv_ip':nfvs.pop(),'dp_ip':dp_ip_list.pop(),'sys_ip':sys_ip_list.pop()}
                    nfv1_info['phy_cpu'] = []
                    nfv2_info['phy_cpu'] = []
                    if rr_nic_type == 'sriov':
                        if rr_nics1 is not None and rr_nics1 != '': 
                            nfv1_info['vfs1'] = host1_vfs.pop()
                            nfv2_info['vfs1'] = host2_vfs.pop()
                        if rr_nics2 is not None and rr_nics2 != '':
                            nfv1_info['vfs2'] = host1_vfs2.pop()
                            nfv2_info['vfs2'] = host2_vfs2.pop()
                    elif  rr_nic_type == 'virtio':
                        nfv1_info['br_dp'] = config.get('vsr_rr','dp_br')
                        nfv2_info['br_dp'] = config.get('vsr_rr','dp_br')

                    if rr_vcpu_pin_enable == True:
                        vsr_cpu_list = []
                        for  i in range(0,vcpu_num):
                            vsr_cpu_list.append(cpu_list.pop())
                        nfv1_info['phy_cpu'] = vsr_cpu_list
                        if host1['host'] == host2['host']:
                            vsr_cpu_list = []
                            for i in range(0, vcpu_num):
                                vsr_cpu_list.append(cpu_list.pop())
                        nfv2_info['phy_cpu'] = vsr_cpu_list
                    nfv1_info['brother_sys_ip'] = nfv2_info['sys_ip']
                    nfv2_info['brother_sys_ip'] = nfv1_info['sys_ip']
                    nfv1_info['brother_dp_ip'] = nfv2_info['dp_ip']
                    nfv2_info['brother_dp_ip'] = nfv1_info['dp_ip']
                    nfv1_info['group'] = str(group_index)
                    nfv2_info['group'] = str(group_index)
                    nfv1_info['rr'] = 'RR'
                    nfv2_info['rr'] = 'RR'
                    uuid_str1 = ''
                    uuid_str2 = ''
                    if len(uuid_list) < 1:
                        uuid_str1 = str(uuid.uuid4())
                        
                    else:
                        uuid_str1 = uuid_list.pop()
                    if len(uuid_list) < 1:
                        uuid_str2 = str(uuid.uuid4())
                    else:
                        uuid_str2 = uuid_list.pop()
                    nfv1_info['uuid'] = uuid_str1
                    nfv2_info['uuid'] = uuid_str2
                    group_index += 1
                    host1["nfvs"].append(nfv1_info)
                    host2["nfvs"].append(nfv2_info)

                topo.append(host1)
                topo.append(host2)
        return topo

    def _gen_vsr_topo_from_conf(self,config, hosts='', nfvs='',per_host=10,uuid_list = []):
        topo=[]
        hosts = ipstr_to_iplist(hosts)
        nfvs  = ipstr_to_iplist(nfvs)
        dp_ip_list = ipstr_to_iplist(config.get('nfv','dp_ip_range'))
        sys_ip_list  = ipstr_to_iplist(config.get('nfv','system_ip_range'))
        sriov_nics1 = config.get('nfv', 'sriov_vnet1')
        sriov_nics2 = config.get('nfv', 'sriov_vnet2')
        per_ethernet = config.get('nfv', 'per_ethernet')
        nic_type = config.get('nfv', 'nic_type')
        vcpu_pin_enable = config.getboolean('nfv', 'vcpu_pin')
        vcpu_num = config.getint('nfv', 'vcpu')
        host1_vfs = []
        host2_vfs = []
        host1_vfs2 = []
        host2_vfs2 = []
        cpu_list = []
        group_index = config.getint('nfv', 'vsr_group_start') + 1 
        br_dps = config.get('nfv','dp_br').split(',')
        per_bridge = config.getint('nfv','per_bridge')
        while True:
            if not hosts:
                break
            count = 0
            host1={"host":hosts.pop(), "nfvs":[]}
            host2={"host":hosts.pop(), "nfvs":[]}
            if nic_type == 'sriov':
                ssh_client1 = SshClient(host1['host'], 22, config.get('host', 'user'),
                                       config.get('host', 'passwd'))
                ssh_client2 = SshClient(host2['host'], 22, config.get('host', 'user'),
                                       config.get('host', 'passwd'))
                if host1['host'] == host2['host']:
                    if sriov_nics1 is not None and sriov_nics1 != '':
                        host1_vfs = self._gen_sriov_vfs_info(sriov_nics1,per_ethernet,ssh_client1,one_host=True)   
                        host2_vfs = host1_vfs
                    if sriov_nics2 is not None and sriov_nics2 != '':
                        host1_vfs2 = self._gen_sriov_vfs_info(sriov_nics2,per_ethernet,ssh_client1,one_host=True)
                        host2_vfs2 = host1_vfs2
                else:
                    if sriov_nics1 is not None and sriov_nics1 != '':
                        host1_vfs = self._gen_sriov_vfs_info(sriov_nics1, per_ethernet, ssh_client1)
                        host2_vfs = self._gen_sriov_vfs_info(sriov_nics1, per_ethernet, ssh_client2)
                    if sriov_nics2 is not None and sriov_nics2 != '':
                        host1_vfs2 = self._gen_sriov_vfs_info(sriov_nics2, per_ethernet, ssh_client1)
                        host2_vfs2 = self._gen_sriov_vfs_info(sriov_nics2, per_ethernet, ssh_client2)

            if vcpu_pin_enable == True:

                cpu_range = config.get('nfv', 'cpu_range')
                cpu_list = self._gen_vcpu_info(cpu_range)
            for i in range(0, per_host):
                if len(nfvs) < 2 or len(dp_ip_list) < 2 or len(sys_ip_list) < 2:
                    break
                if vcpu_pin_enable == True:

                    if host1['host'] == host2['host']:
                        if len(cpu_list) < vcpu_num*2:
                            break;
                    else:
                        if len(cpu_list) < vcpu_num:
                            break;
                if  nic_type == 'sriov' and (len(host1_vfs) < 1 or len(host2_vfs) < 1) and (len(host1_vfs2) < 1 or len(host2_vfs2) < 1):
                    break;

                if  nic_type == 'virtio' and count  >=  len(br_dps) * per_bridge :
                    break;
                    
                nfv1_info = {'nfv_ip':nfvs.pop(),'dp_ip':dp_ip_list.pop(),'sys_ip':sys_ip_list.pop()}
                nfv2_info = {'nfv_ip':nfvs.pop(),'dp_ip':dp_ip_list.pop(),'sys_ip':sys_ip_list.pop()}
                nfv1_info['brother_sys_ip'] = nfv2_info['sys_ip']
                nfv2_info['brother_sys_ip'] = nfv1_info['sys_ip']
                nfv1_info['brother_dp_ip'] = nfv2_info['dp_ip']
                nfv2_info['brother_dp_ip'] = nfv1_info['dp_ip']
                if nic_type == 'sriov':
                    if sriov_nics1 is not None and sriov_nics1 != '':
                        nfv1_info['vfs1'] = host1_vfs.pop()
                        nfv2_info['vfs1'] = host2_vfs.pop()
                    if sriov_nics2 is not None and sriov_nics2 != '':
                        nfv1_info['vfs2'] = host1_vfs2.pop()
                        nfv2_info['vfs2'] = host2_vfs2.pop()
                if nic_type == 'virtio':
                    nfv1_info['br_dp'] = br_dps[count/per_bridge]
                    nfv2_info['br_dp'] = br_dps[count/per_bridge]
                    count = count + 1
                    
                if vcpu_pin_enable == True:
                    vsr_cpu_list = []
                    for  i in range(0,vcpu_num):
                        vsr_cpu_list.append(cpu_list.pop())
                    nfv1_info['phy_cpu'] = vsr_cpu_list
                    if host1['host'] == host2['host']:
                        vsr_cpu_list = []
                        for i in range(0, vcpu_num):
                            vsr_cpu_list.append(cpu_list.pop())
                    nfv2_info['phy_cpu'] = vsr_cpu_list
                uuid_str1 = ''
                uuid_str2 = ''
                if len(uuid_list) < 1:
                    uuid_str1 = str(uuid.uuid4())
                else:
                    uuid_str1 = uuid_list.pop()
                if len(uuid_list) < 1:
                    uuid_str2 = str(uuid.uuid4())
                else:
                    uuid_str2 = uuid_list.pop()
                nfv1_info['uuid'] = uuid_str1
                nfv2_info['uuid'] = uuid_str2
                nfv1_info['group'] = str(group_index)
                nfv2_info['group'] = str(group_index)
                group_index += 1
                if group_index % 2 == 0:
                    host1["nfvs"].append(nfv2_info)
                    host2["nfvs"].append(nfv1_info)
                else:
                    host1["nfvs"].append(nfv1_info)
                    host2["nfvs"].append(nfv2_info)
            #add host vpc and nic info
            topo.append(host1)
            topo.append(host2)
        return topo

class DeployUtil(object):
    def gen_single_nfv_private_info(self, nfv_ip, nfv_vip, target_dir):
        return {'id':str(uuid.uuid4()), 'name':nfv_ip+'-'+nfv_vip,
                'image_name':target_dir+'/'+nfv_ip+'.qcow2',  
                'mgmt_ip':nfv_ip,
                'ip_2':int(nfv_ip.split('.')[2]),
                'ip_3':int(nfv_ip.split('.')[3])}

    def gen_single_nfv_xml(self, nfv_ip, nfv_vip, config, target_dir):
        #if not os.path.dirname(conf_dir) in sys.path:
        #    sys.path.append(conf_dir)
        from nsb_nfv_tools.libvirt_xml_tmpl import libvirt_tmpl,interface_xml
        conf_dict=dict(copy.deepcopy(dict(config.items('nfv'))), \
                       **self.gen_single_nfv_private_info(nfv_ip, nfv_vip, target_dir))  
        if config.get('nfv','vpc_conn_br') is not None and  config.get('nfv','vpc_conn_br')!='':
           conf_dict['interface_vpcconn'] = interface_xml %  {'vpc_conn_br':config.get('nfv','vpc_conn_br')}
        else:
            conf_dict['interface_vpcconn'] = ''
        return libvirt_tmpl%conf_dict
    def add_nfv_interface_on_host(self,host_nfvs_dict, config):
        from nsb_nfv_tools.libvirt_xml_tmpl import interface_xml
        tmp_dir='/tmp/'+time.asctime().replace(' ', '-')
        tmp_xml_path=tmp_dir+'/interface.xml'

        ssh_client = SshClient(host_nfvs_dict['host'], 22, config.get('host','user'), 
                               config.get('host','passwd'))

        tmpxml = interface_xml % {'vpc_conn_br':config.get('nfv', 'vpc_conn_br')} 
        sftp_cbs = [[_write, tmpxml , tmp_xml_path]]
        ssh_cbs = []

        for nfv in host_nfvs_dict['nfvs']:
            name = nfv['nfv_ip']+'-'+nfv['nfv_vip']
            cmd = "virsh attach-device  %s  --file %s --persistent; " %(name,tmp_xml_path)
            ssh_cbs.append([_exec, cmd])
        ssh_client.execute(sftp_cbs=sftp_cbs, ssh_cbs=ssh_cbs)     
    
    def deploy_to_single_host(self, host_nfvs_dict, config):
        tmp_dir='/tmp/'+time.asctime().replace(' ', '-')
        tmp_image=tmp_dir+'/'+os.path.basename(config.get('nfv','base_image'))
        target_dir=config.get('host', 'nfv_target_dir')

        ssh_client = SshClient(host_nfvs_dict['host'], 22, config.get('host','user'), 
                               config.get('host','passwd'))
        sftp_cbs = [[_put, config.get('nfv','base_image'), tmp_image]]
        ssh_cbs = []
        
        for nfv in host_nfvs_dict['nfvs']:
            xmp_str=self.gen_single_nfv_xml(nfv['nfv_ip'], nfv['nfv_vip'], config, target_dir)
            target_xml=target_dir+'/'+nfv['nfv_ip']+'.xml'
            target_image=target_dir+'/'+nfv['nfv_ip']+'.qcow2'
            
            sftp_cbs.append([_write,  xmp_str, target_xml])
            #weihuap NFV vms need to be shutdown before copying new image
            #ssh_cbs.append([_exec, 'cp %s %s'%(tmp_image, target_image)])
            
            name = nfv['nfv_ip']+'-'+nfv['nfv_vip']
            #weihuap NFV vms need to be shutdown before copying new image
            ssh_cbs.append([_exec, 'virsh destroy %s; virsh undefine %s; rm -f %s ;cp %s %s'%(name, name, target_image, tmp_image, target_image)])
            cmd = "virsh destroy %(name)s; sleep 1;" \
                  "virsh undefine %(name)s; sleep 1;" \
                  "virsh define %(xml)s; sleep 1;"    \
                  "virsh start %(name)s; sleep 1;"    \
                  "virsh autostart %(name)s; sleep 1;" %({"name":name,"xml":target_xml})
            ssh_cbs.append([_exec, 'virsh destroy %s-%s; sleep 1'%(nfv['nfv_ip'], nfv['nfv_vip'])])            
            ssh_cbs.append([_exec, cmd])
           
        ssh_client.execute(sftp_cbs=sftp_cbs, ssh_cbs=ssh_cbs)     
    def add_nfv_interface(self, topo, config):
        for host_nfvs_dict in topo:
            self.add_nfv_interface_on_host(host_nfvs_dict, config)

    def deploy_to_hosts(self, topo, config):
        for host_nfvs_dict in topo:
            self.deploy_to_single_host(host_nfvs_dict, config)


    def gen_single_vsr_private_info(self, nfv_ip,nfv_group, target_dir):
        return {'name':'vsr_%s_%s'%(nfv_group,nfv_ip),
                'image_name':target_dir+'/'+nfv_ip+'.qcow2',
                'mgmt_ip':nfv_ip}

    def gen_single_vsr_xml(self,nfv, config, target_dir):
        #if not os.path.dirname(conf_dir) in sys.path:
        #    sys.path.append(conf_dir)
        vcpupin_xml = ''
        cpu_tune_xml = ''
        from nsb_nfv_tools import libvirt_vsr_xml
        #cpu
        if config.getboolean('nfv','vcpu_pin') == True:
            if len(nfv['phy_cpu']) > 0:
                cpu_list = nfv['phy_cpu']
                cpu_index = 0
                for cpu in cpu_list:
                    vcpupin_xml += libvirt_vsr_xml.vcpu_pin % {'vcpu_num':str(cpu_index),'cpu_set':str(cpu)}
                    cpu_index += 1
                #net get the host cpu number
            cpu_tune_xml = libvirt_vsr_xml.cpu_tune % {'vcpu_pin':vcpupin_xml}

        #huge pages
        huage_pages_xml = ''
        if config.getboolean('nfv', 'huage_pages_enable') == True:
            huage_pages_xml += libvirt_vsr_xml.mem_hugepages

        dp_int_xml =''

        #if config.get('nfv', 'nic_type') == 'sriov' or  config.get('vsr_rr', 'nic_type') == 'sriov'
        if nfv.get('vfs1') is not None:
            #SRIOV NIC
            vfs_info = nfv.get('vfs1').split(':')
            slot_fun = vfs_info[2].split('.')
            param = {
                'dp_mac':self.random_mac(),
                'sriov_bus':'0x%s' %vfs_info[1],
                'sriov_slot':'0x%s' %slot_fun[0],
                'sriov_fun':'0x%s' %slot_fun[1],
                'pci_slot_num':'0x04'
            }
            dp_int_xml += libvirt_vsr_xml.interface_sriov %param
        if nfv.get('vfs2') is not None:
            vfs_info = nfv.get('vfs2').split(':')
            slot_fun = vfs_info[2].split('.')
            param = {
                'dp_mac':self.random_mac(),
                'sriov_bus':'0x%s' %vfs_info[1],
                'sriov_slot':'0x%s' %slot_fun[0],
                'sriov_fun':'0x%s' %slot_fun[1],
                'pci_slot_num':'0x05'
            }
            dp_int_xml += libvirt_vsr_xml.interface_sriov %param

            #virtIO NIC
            #param = {}
            #if nfv.get('rr')== 'RR' and  config.get('vsr_rr', 'nic_type')== 'virtio':
            #    param = {
            #        'dp_mac': self.random_mac(),
                    #'dp_br': config.get('vsr_rr', 'dp_br')
            #        'dp_br': nfv.get('br_dp')
            #    }
        if nfv.get('br_dp') is not None: 
            param = {
                'dp_mac': self.random_mac(),
                #'dp_br': config.get('nfv', 'dp_br')
                'dp_br': nfv.get('br_dp')
            }
            dp_int_xml += libvirt_vsr_xml.interface_virtio % param

        conf_dict=dict(copy.deepcopy(dict(config.items('nfv'))),\
                       **self.gen_single_vsr_private_info(nfv.get('nfv_ip'), nfv.get('group'),target_dir))
        conf_dict['cpu_tune'] = cpu_tune_xml
        conf_dict['huage_pages'] = huage_pages_xml
        conf_dict['int_dp'] = dp_int_xml
        conf_dict['mgmt_mac'] = self.random_mac()
        conf_dict['uuid'] = nfv.get('uuid')
        return libvirt_vsr_xml.libvirt_vsr%conf_dict

    def deploy_vsr_to_single_host(self, host_nfvs_dict, config):

        ssh_client1 = SshClient(host_nfvs_dict['host'], 22, config.get('host', 'user'),
                               config.get('host', 'passwd'))


        tmp_dir = '/tmp/' + time.asctime().replace(' ', '-')
        tmp_image = tmp_dir + '/' + os.path.basename(config.get('nfv', 'base_image'))
        target_dir = config.get('host', 'nfv_target_dir')


        ssh_cbs1 = []
        ssh_cbs1.append([_exec, "sudo mkdir -p %s" %target_dir])
        ssh_cbs1.append([_exec, "sudo chmod -R 777  %s" %target_dir])
        try:
            ssh_client1.execute(sftp_cbs=[], ssh_cbs=ssh_cbs1)
        except Exception as e:
            print("ERR:%s"%str(e))

        ssh_client = SshClient(host_nfvs_dict['host'], 22, config.get('host', 'user'),
                               config.get('host', 'passwd'))
        sftp_cbs = [[_put, config.get('nfv', 'base_image'), tmp_image]]
        ssh_cbs = []
        for nfv in host_nfvs_dict['nfvs']:
            xmp_str = self.gen_single_vsr_xml(nfv, config, target_dir)
            target_xml = target_dir + '/' + nfv['nfv_ip'] + '.xml'
            target_image = target_dir + '/' + nfv['nfv_ip'] + '.qcow2'

            sftp_cbs.append([_write, xmp_str, target_xml])

            ssh_cbs.append([_exec, 'sudo cp %s %s' % (tmp_image, target_image)])

            #
            #

            name = 'vsr_%s_%s'%(nfv['group'],nfv['nfv_ip'])
            cmd = "sudo virsh destroy %(name)s; sleep 1;" \
                  "sudo virsh undefine %(name)s;" \
                  "sudo virsh define %(xml)s;" \
                  "sudo virsh start %(name)s; sleep 1;" \
                  "sudo virsh autostart %(name)s; sleep 1;"% ({"name": name, "xml": target_xml})
            ssh_cbs.append([_exec, 'sudo virsh destroy vsr_%s; sleep 1' % nfv['nfv_ip']])
            ssh_cbs.append([_exec, cmd])

        try:
            ssh_client.execute(sftp_cbs=sftp_cbs, ssh_cbs=ssh_cbs)
        except Exception as e:
            print("ERR:%s"%str(e))

    def deploy_vsr_to_hosts(self,topo,config):
        for host_nfvs_dict in topo:
            self.deploy_vsr_to_single_host(host_nfvs_dict, config)

    def deploy_reflect_vsr_to_hosts(self,topo,config):
        self.deploy_vsr_to_single_host(topo[0], config)
        self.deploy_vsr_to_single_host(topo[1], config)

        

    def deploy_service_vsr_to_hosts(self,topo,config):
        topo = topo[2:]
        for host_nfvs_dict in topo:
            self.deploy_vsr_to_single_host(host_nfvs_dict, config)
    def random_mac(self):
        mac = [0x52, 0x54, 0x00,
               random.randint(0x00, 0x7f),
               random.randint(0x00, 0xff),
               random.randint(0x00, 0xff)]
        return ':'.join(map(lambda x: "%02x" % x, mac))


class NeutronConfigUtil(object):
    def _get_node_pair(self, vip, node1, topo):
        node2=''
        for v in topo:
            for nfv in v['nfvs']:
                if nfv['nfv_vip'] == vip and node1 != nfv['nfv_ip']:
                    node2= nfv['nfv_ip']
                    break
            if node1 and node2 and vip:
                return {'node1':node1, 'node2':node2, 'vip':vip+':5959', 'vlan':str(nfv['vlan'])}
        return {}
        
    def deploy_vyos_config_boot_file_and_node_to_neutron(self, topo, config):
        sftp_cbs = []

        #if not os.path.dirname(conf_dir) in sys.path:
        #    sys.path.append(conf_dir)
        from nsb_nfv_tools.vyos_config_boot_tmpl import vyos_config_boot_tmpl
        
        nodes=[]
        vips=set()
        for v in topo:
            for nfv in v['nfvs']:
                sftp_cbs.append([_write,
                                vyos_config_boot_tmpl%dict(nfv,**{'nfv_mask':config.get('nfv', 'mask')}),
                                '/etc/neutron/vyos/'+nfv['nfv_ip']])
                node_info = self._get_node_pair(copy.deepcopy(nfv['nfv_vip']),
                                                copy.deepcopy(nfv['nfv_ip']),
                                                copy.deepcopy(topo))
                if node_info and nfv['nfv_vip'] not in vips:
                    nodes.append(node_info)
                    vips.add(nfv['nfv_vip'])
         
        nfv_nodes={"vrsg":[{"vrsg_id":config.get('vsd', 'vrsg_port_id'), "nfv_node":nodes}]}
        print nfv_nodes
        sftp_cbs.append([_write, json.dumps(nfv_nodes,indent=2), config.get('neutron', 'nfv_nodes')])
        file = config.get('neutron', 'nfv_nodes').split('/')
        filename = '/etc/nsb/' + file[-1]
        os.system('sudo rm %s -rf' % filename)      
        f = open(filename,"w+")
        f.write(json.dumps(nfv_nodes,indent=2))
        f.close() 
        for server in config.get('neutron', 'server').split(','): 
            ssh_client = SshClient(server,  22, config.get('neutron', 'user'),
                                   config.get('neutron','passwd'))
            ssh_client.execute(sftp_cbs)

    def get_alreaddy_deploy_vsr_list(self,config):
        deployed_mgmt= config.get('nfv','deployed_ip') 
        deployed_dp= config.get('nfv','deployed_dp_ip') 
        deployed_system= config.get('nfv','deployed_system_ip') 
        deployed_nfvs = []
        if deployed_mgmt is None or deployed_mgmt == '':
            return []
        if deployed_dp is None or deployed_dp == '':
            return []
        if deployed_system is None or deployed_system == '':
            return []

        nfv_ip_list = ipstr_to_iplist(deployed_mgmt)
        dp_ip_list = ipstr_to_iplist(deployed_dp)
        sys_ip_list = ipstr_to_iplist(deployed_system)

        while len(dp_ip_list) >= 1 and len(sys_ip_list) >= 1 and len(nfv_ip_list) >= 1:
            deployed_nfvs.append({'nfv_ip':nfv_ip_list.pop(),
                                  'dp_ip':dp_ip_list.pop(),
                                  'sys_ip':sys_ip_list.pop()})
        return deployed_nfvs



    def gen_vsr_boot_config(self,topo,config):
        from nsb_nfv_tools.gen_vsr_config import save_bof_config,save_boot_config
        deployed_nfvs = self.get_alreaddy_deploy_vsr_list(config)
        save_bof_config(topo, config)
        save_boot_config(topo, config,deployed_nfvs)

    def config_vsd_for_vpcconn(self,topo,config):
        from nsb_nfv_tools.gen_vsr_config import config_vsd
        config_vsd(topo, config)

    def reboot_vsr(self,topo,config):
        from nsb_nfv_tools.gen_vsr_config import reboot_vsr_for_vpcconn
        topo = topo[2:]
        reboot_vsr_for_vpcconn(topo, config)

    def ping_vsr_for_vpcconn(self,topo,config):
        from nsb_nfv_tools.gen_vsr_config  import ping_vsr
        ping_vsr(topo, config)

    def execute_on_vsr(self,topo, config, cmd):
        from nsb_nfv_tools.gen_vsr_config import execute_cmd_on_vsr
        execute_cmd_on_vsr(topo, config,cmd)

    def config_nova_route(self,topo,config):
        from nsb_nfv_tools.gen_vsr_config import config_nova_static_route
        nova_list = ipstr_to_iplist(config.get('nova', 'ip_range'))
        config_nova_static_route(topo, config,nova_list)

    def config_neutron_for_vpcconn_vsr(self,topo,config):
        from nsb_nfv_tools.gen_vsr_config import save_neutron_config
        deployed_nfvs = self.get_alreaddy_deploy_vsr_list(config)
        save_neutron_config(topo,config,deployed_nfvs=deployed_nfvs)


class UpdateNfvUtil(object):

    def update_nfv(self,nfv_side, nfv_update_mode):
        os.system("python /etc/nsb/deploy --nfv_file /etc/neutron/nfv.conf "
                  "--lb_nfv_file /etc/neutron/lb_nfv.conf --vyos_passwd P1a2s30rd@yro "
                  "--server %s --mode %s" % (nfv_side, nfv_update_mode))


class FortinetTopo(TopoUtil):
    
    def gen_topo_from_conf(self, config):
        topo1 = TopoUtil().gen_topo_from_conf(config)
        topo2 = self._gen_topo_from_conf(config, hosts=config.get('host', 'ip_range'),
                    nfvs="0.0.0.0",
                    vlans=config.get('fortinet_nfv', 'vlan_range'),
                    per_host=config.getint('host','per_host'))

        return topo1,topo2

    def _gen_topo_from_conf(self, config, hosts='', nfvs='', vlans='', per_host=10):

        topo=[]
        hosts = ipstr_to_iplist(hosts)
        nfvs  = ipstr_to_iplist(nfvs)
        vlans = vlanstr_to_vlanlist(vlans)
        while True:
            if not hosts:
                break
            host1={"host":hosts.pop(), "fortinet":[]}
            host2={"host":hosts.pop(), "fortinet":[]}
	    for item in range(len(vlans)):
                vlan=vlans.pop()
                host1["fortinet"].append({"nfv_ip":"0.0.0.0", "nfv_vip":config.get('fortinet_nfv', 'vip'),
                                      "vlan":vlan, "vrrp_group":""})
                host2["fortinet"].append({"nfv_ip":"0.0.0.0", "nfv_vip":config.get('fortinet_nfv', 'vip'),
                                      "vlan":vlan, "vrrp_group":""})
            topo.append(host1)
            topo.append(host2)
	return topo

    def topo_show(self,topo):
        for v in topo:
	    if v.get("nfvs"):
                for nfv in v['nfvs']:
                    print '| host %16s| nfv_ip %16s| nfv_vip %16s| vlan %4s| vrrp_group %4s|'\
                        %(v['host'],nfv["nfv_ip"], nfv["nfv_vip"],nfv["vlan"], nfv['vrrp_group']) 
	    if v.get("fortinet"):
                for nfv in v['fortinet']:
                    print '| host %16s| nfv_ip %16s| nfv_vip %16s| vlan %4s| vrrp_group %4s|'\
                        %(v['host'],nfv["nfv_ip"], nfv["nfv_vip"],nfv["vlan"], nfv['vrrp_group']) 

class Fortinet_NeutronConfigUtil(NeutronConfigUtil):

    def _get_fortinet_node_pair(self, topo):
	all_node_info = []
        for v in topo:
	    if v.get("fortinet"):
                for nfv in v['fortinet']:
                    all_node_info.append({'node1':nfv["nfv_ip"], 'node2':nfv["nfv_ip"], 'vip':nfv["nfv_vip"], 'vlan':str(nfv['vlan'])})
	return all_node_info
    
    def deploy_vyos_config_boot_file_and_node_to_neutron(self, topo, config):
        sftp_cbs = []

        from nsb_nfv_tools.vyos_config_boot_tmpl import vyos_config_boot_tmpl
        
        nodes=[]
        fortinet_nodes=[]
        vips=set()
        vlans = set()
        for v in topo:
	    if v.get("nfvs"):
                for nfv in v['nfvs']:
                    sftp_cbs.append([_write,
                                vyos_config_boot_tmpl%dict(nfv,**{'nfv_mask':config.get('nfv', 'mask')}),
                                '/etc/neutron/vyos/'+nfv['nfv_ip']])
                    node_info = self._get_node_pair(copy.deepcopy(nfv['nfv_vip']),
                                                copy.deepcopy(nfv['nfv_ip']),
                                                copy.deepcopy(topo))
                    if node_info and nfv['nfv_vip'] not in vips:
                        nodes.append(node_info)
                        vips.add(nfv['nfv_vip'])

	    if v.get("fortinet"):
                all_node_info = self._get_fortinet_node_pair(copy.deepcopy(topo))
                                                
		for node_info in all_node_info:
                    if node_info and node_info['vlan'] not in vlans:
                        fortinet_nodes.append(node_info)
                        vlans.add(node_info['vlan'])
		    else:
			break
        
        nfv_nodes = OrderedDict()
        #nfv_nodes["vrsg"] = [{"vrsg_id":config.get('vsd', 'vrsg_port_id'), "nfv_node":nodes}]
        nfv_nodes["fortinet"] = [{"vrsg_id":config.get('fortinet_vsd', 'vrsg_port_id'), "nfv_node":fortinet_nodes}]         

        print nfv_nodes
        sftp_cbs.append([_write, json.dumps(nfv_nodes,indent=2), config.get('neutron', 'fortinet_nodes')])
        file = config.get('neutron', 'fortinet_nodes').split('/')
        filename = '/etc/nsb/' + file[-1]
        os.system('sudo rm %s -rf' % filename)      
        f = open(filename,"w+")
        f.write(json.dumps(nfv_nodes,indent=2))
        f.close() 
        for server in config.get('neutron', 'server').split(','): 
            ssh_client = SshClient(server,  22, config.get('neutron', 'user'),
                                   config.get('neutron','passwd'))
            ssh_client.execute(sftp_cbs)

 
def main():
    opt = OptionParser()
    opt.add_option('--deploy',
                   action="store_true",
                   dest="deploy_nfv",
                   default=False,
                   help='deploy nfv node')
    opt.add_option('--config',
                   dest='config',
                   type=str,
                   default='/etc/nsb/nfv.config',
                   help='config file')
    opt.add_option('--set-neutron',
                   action="store_true",
                   dest="set_neutron",
                   default=False,
                   help="set nfv node info to neutron")
    opt.add_option('--show',
                   action="store_true",
                   dest="show_topo",
                   default=True,
                   help="show the deployment topo")
    opt.add_option('--exec',
                   dest='exec_cmd',
                   type=str,
                   default='',
                   help='remote exec shell command')
    opt.add_option('--put',
                   dest='put_cmd',
                   type=str,
                   default='',
                   help='put local file to remote file, only file support')
    opt.add_option('--update-nfv',
                   dest='update_nfv',
                   action="store_true",
                   default='',
                   help='update nfv scripts')
    opt.add_option('--nfv-interface-add',
                   dest='nfv_interface_add',
                   action="store_true",
                   default='',
                   help='nfv interface add  scripts')
    opt.add_option('--nfv-side',
                   dest='nfv_side',
                   type=str,
                   default='all',
                   help='update nfv side, default all')
    opt.add_option('--mode',
                   dest='nfv_update_mode',
                   type=str,
                   default='startover',
                   help='choose nfv update mode')
    opt.add_option('--deploy-vsr',
                   dest='deploy_vsr',
                   action="store_true",
                   default='',
                   help='deploy vsr scripts')
    opt.add_option('--deploy-vsr-reflect',
                   dest='deploy_vsr_reflect',
                   action="store_true",
                   default='',
                   help='deploy route reflect vsr  scripts')
    opt.add_option('--deploy-vsr-service',
                   dest='deploy_vsr_service',
                   action="store_true",
                   default='',
                   help='deploy route reflect vsr  scripts')
    opt.add_option('--config-neutron',
                   dest='config_neutron',
                   action="store_true",
                   default='',
                   help='config  vpconnn vsr neutron config file')
    opt.add_option('--config-vsr',
                   dest='config_vsr',
                   action="store_true",
                   default='',
                   help='config  vpconnn vsr boot config file')
    opt.add_option('--config-vsd',
                   dest='config_vsd',
                   action="store_true",
                   default='',
                   help='config   vsd  for vpconnn')
    opt.add_option('--reboot-vsr',
                   dest='reboot_vsr',
                   action="store_true",
                   default='',
                   help='reboot vsr for deploy vsr')
    opt.add_option('--ping-vsr',
                   dest='ping_vsr',
                   action="store_true",
                   default='',
                   help='ping vsr for deploy vsr')
    opt.add_option('--is-vsr',
                   dest='is_vsr',
                   action="store_true",
                   default='',
                   help='vsr operating')
    opt.add_option('--exec-vsr-cmd',
                   dest='exec_vsr_cmd',
                   default='',
                   type=str,
                   help='execute command on  vsr  vsr')
    opt.add_option('--config-nova-route',
                   dest='config_nova_route',
                   action="store_true",
                   default='',
                   help='config nova datapath route to  vsr')

    opt.add_option('--add-fortinet',
                   dest='add_fortinet',
                   default=False,
                   action="store_true",
                   help='add fortinet info to nfv.conf')

    (options, args) = opt.parse_args()
    is_valid_paras = True
    show_topo   = options.show_topo
    deploy_nfv  = options.deploy_nfv
    conf        = options.config
    set_neutron = options.set_neutron
    exec_cmd    = options.exec_cmd
    put_cmd    = options.put_cmd
    update_nfv = options.update_nfv
    nfv_interface_add = options.nfv_interface_add
    nfv_side = options.nfv_side
    nfv_update_mode = options.nfv_update_mode
    deploy_vsr = options.deploy_vsr
    deploy_vsr_reflect = options.deploy_vsr_reflect
    deploy_vsr_service = options.deploy_vsr_service
    config_neutron = options.config_neutron
    config_vsr = options.config_vsr
    config_vsd = options.config_vsd
    reboot_vsr = options.reboot_vsr
    ping_vsr = options.ping_vsr
    exec_vsr_cmd = options.exec_vsr_cmd
    config_nova_route = options.config_nova_route
    add_fortinet = options.add_fortinet
    is_vsr = options.is_vsr
    config = ConfigParser.ConfigParser()
    config.read(conf)    

    if exec_cmd  or put_cmd:
        for server in ipstr_to_iplist(config.get('host','ip_range')):
            ssh_client=SshClient(server, 22, config.get('host','user'), config.get('host','passwd'))
            sftp_cbs=[]
            ssh_cbs=[]
            if exec_cmd:
                print '%34s %16s %40s'%('-'*34,server,'-'*40)
                ssh_cbs.append([_exec, exec_cmd])
                print ssh_client.execute([], ssh_cbs, ret=True)
            if put_cmd:
                print '%34s %16s %40s'%('-'*34,server,'-'*40)
                sftp_cbs.append([_put,  put_cmd.split()[0], put_cmd.split()[1]])
                print ssh_client.execute(sftp_cbs, [], ret=True)
        return
    topo=[]
    topo_util = TopoUtil()
    fortinetTopo = []
    
    if is_vsr:
        topo = topo_util.gen_vsr_topo_from_conf(config)
    elif add_fortinet:
        topo,fortinetTopo = FortinetTopo().gen_topo_from_conf(config)
    else:
        topo = topo_util.gen_topo_from_conf(config)

    if show_topo:
        if is_vsr:
            topo_util.topo_vsr_show(topo,config)
        #elif add_fortinet:
        #    FortinetTopo().topo_show(topo+fortinetTopo)
	else:
	    topo_util.topo_show(topo)

    if set_neutron:
	if add_fortinet:
	    Fortinet_NeutronConfigUtil().deploy_vyos_config_boot_file_and_node_to_neutron(topo+fortinetTopo, config)
	else:
            NeutronConfigUtil().deploy_vyos_config_boot_file_and_node_to_neutron(topo, config)

    if deploy_nfv:
        DeployUtil().deploy_to_hosts(topo, config)
    if update_nfv:
        UpdateNfvUtil().update_nfv(nfv_side, nfv_update_mode)
    if deploy_vsr:
        DeployUtil().deploy_vsr_to_hosts(topo,config)
    if deploy_vsr_reflect:
        DeployUtil().deploy_reflect_vsr_to_hosts(topo,config)
    if deploy_vsr_service:
        DeployUtil().deploy_service_vsr_to_hosts(topo,config)
    if config_neutron:
        NeutronConfigUtil().config_neutron_for_vpcconn_vsr(topo,config)
    if config_vsr:
        NeutronConfigUtil().gen_vsr_boot_config(topo,config)
    if config_vsd:
        NeutronConfigUtil().config_vsd_for_vpcconn(topo,config)
    if reboot_vsr:
        NeutronConfigUtil().reboot_vsr(topo, config)
    if ping_vsr:
        NeutronConfigUtil().ping_vsr_for_vpcconn(topo, config)
    if exec_vsr_cmd:
        NeutronConfigUtil().execute_on_vsr(topo, config,exec_vsr_cmd)
    if config_nova_route:
        NeutronConfigUtil().config_nova_route(topo, config)
    if nfv_interface_add:
        DeployUtil().add_nfv_interface(topo, config)

    pass

main()
    

